@model List<ControleEstoque.Models.GrupoProdutoModel>

@{
    ViewBag.title = "Cadastro_de_grupo_de_produtos";
}

<div id="cadastro">

    <section id="cadastro_cabecalho">
        <h1>Cadastro de Produtos</h1>
    </section>

    <section id="cadastro_conteudo">

        <div id="cabecalho_grid" class="row">
            <div class="col-md-12">
                <a id="btn_incluir" class="btn btn-success" role="button">
                    <i class="glyphicon glyhphicon-plus">
                        Adicionar
                    </i>
                </a>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <table id="grid_cadastro" class="table table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Ativo</th>
                            <th>Ação</th>
                        </tr>
                    </thead>
                    <tbody>
                        @*para que você consigar ler esse tipo de dados com foreach ou qualquer laço de repetição
                            você tem que importar o Model em formato de lista como mostra o exemplo abaixo
                            @model List<ControleEstoque.Models.GrupoProdutoModel>
                        *@
                        @foreach (var item in Model)
                        {
                            <tr data-id="@item.Id">
                                <td> @item.Nome</td>
                                <td>
                                    @{
                                        var ativo = (item.Ativo ? "SIM" : "NÃO");
                                    }@ativo
                                </td>

                                <td>

                                    <a class="btn btn-primary btn-alterar" role="button"> <i class="glyphicon glyphicon-pencil"> Alterar </i> </a>
                                    <a class="btn btn-danger btn-excluir" role="button"> <i class="glyphicon glyphicon-trash"> Excluir </i> </a>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        </div>

    </section>
</div>


@Html.Hidden("Id_cadastro")
<div id="modal_cadastro" class="form-horizontal invisivel" role="dialog">
    <fieldset>
        <div class="row">

            <div class="form-group">
                <div class=".col-sm-6 col-md-6 col-lg-3 col-xl-3">
                    @Html.Label("lbl_nome", "Nome", new { @class = "col-md-3 control-label" })
                </div>
                <div class=".col-sm-6 col-md-6 col-lg-9 col-xl-9">
                    @Html.TextBox("txt_nome", null, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <div class=".col-sm-6 col-md-6 col-lg-3 col-xl-3">
                    @Html.Label("lbl_ativo", "Ativo", new { @class = "col-md-3 control-label" })
                </div>
                <div class=".col-sm-6 col-md-6 col-lg-9 col-xl-9">
                    @Html.CheckBox("cbx_ativo")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <div class="modal-footer">
                        <a id="btn_sair" class="btn btn-default" role="button" data-dismiss="modal"> <i class="glyphicon glyphicon-remove"> Sair </i> </a>
                        <a id="btn_confirmar" class="btn btn-primary" role="button" > <i class="glyphicon glyphicon-ok"> salvar </i> </a>
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
</div>


@section Scripts{

    @*<script src="~/Scripts/AcaoTabela.js"></script>*@

<script>

    //Essa função serve para criar a estrutura da tabela de uma linha a ser adicionada
    function criar_linha_grid(dados) {

        var retorno =
            '<tr data-id=' + dados.Id + '>' +
            '<td>' + dados.Nome + '</td>' +
            '<td>' + (dados.Ativo ? 'SIM' : 'NÃO') + '</td>' +
            '<td>' +
            '<a class="btn btn-primary btn-alterar" role="button" style="margin-left: 3px";> <i class="glyphicon glyphicon-pencil"> Alterar </i> </a>' +
            '<a class="btn btn-danger btn-excluir" role="button" > <i class="glyphicon glyphicon-trash"> Excluir </i> </a>' +
            '</td>' +
            '</tr>';

        return retorno;
        }


      function exibir_form(dados) {

    //Aqui você pega toda a div marcado com Id="modal_cadastro"
    //joga ela para um variavel tipada para ser usado mais adiante na execução
    //
    var modal = $('#modal_cadastro');

    //aqui a função pega os valores passados como pametro e alimenta
    //os campos da modal
          $('#Id_cadastro').val(dados.id);
          $('#txt_nome').val(dados.Nome);
          $('#cbx_ativo').prop('checked', dados.Ativo);


    //Esse função bootbox.dialog é o que permite o inicio da manipulação da caixa modal
    //dentro da função dialog existe '{}' que representam os objetos para exibir no modal
    //Title o titulo do modal
    //Messagem é o objeto que será exibido
    bootbox.dialog({
        title: 'Teste',
        message: modal
    })
        //Esta função é usada para exibir o modal, é uma função de dentro do doc
        //do framework do modal(pacote instalado na aplicação)
        .on('shown.bs.modal', function () {

            //A função é chamado com referencia ao objeto modal setado no inicio da função
            //Dentro da função show é usado as propriedades
            modal.show(0, function () {
                $('#txt_nome').focus()
            });
        })
        .on('hidden.bs.modal', function () {
            //Novamente esta sendo chamado uma função de dentro do modal
            //A função hide ocula o item
            //a função appendTo retira o item da modal e devolver para o corpo da pagina
            modal.hide().appendTo('body');
        });
    }


        function chamaDoPost(actionDeAcesso) {

            $.post(url, param, function (response) {
            if (response) {
                exibir_form(response)
            }
        });
    }

    function chamadaDeParametroPost() {
           id = btn.closest('tr').attr('data-id'),
            url = '@Url.Action("RecuperarGrupoProduto","Cadastro")',
            param = { 'id': id };
        return [id, url, ]
    }


    $(document).on('click', '#btn_incluir', function () {

        exibir_form({ Id: 0, Nome: '', Ativo: false });
    })
        .on('click', '.btn-alterar', function () {


            //Var é a declaração de variaveis, e todas são separadas por virgula
            var btn = $(this),

                //Dentro do seu grid tem um preenchimento de id de variavel
                //Para acessar o id preenchido no grid com javascript
                // a atribuição de 'btn' é um objeto jQuery com métodos que o jQuery disponibiliza
                //Em seguida o Btn é acessado com closest para retornar o primeiro acesso de um elemento(o mais proximo)
                //No caso abaixo é acessado o Tr como elemento ais proximo, e sem seguida é acessado o atributo com attr('data-id')
                //Apos acessa o elemento mais proximo vc acessa seua atributo com attr('data-id')
                id = btn.closest('tr').attr('data-id'),
                url = '@Url.Action("RecuperarGrupoProduto","Cadastro")',
                param = { 'id': id };

            $.post(url, param, function (response) {
                if (response) {
                    exibir_form(response)
                }
            });
        })

        .on('click', '.btn-excluir', function () {
            var btn = $(this),
                tr = btn.closest('tr'),
                id = tr.attr('data-id'),
                url = '@Url.Action("ExcluirGrupoProduto","Cadastro")',
                param = { 'id': id };

            bootbox.confirm({
                size: "small",
                message: "Are you sure?",
                callback: function (result) {
                    if (result) {
                        bootbox.alert("Item Excluido")

                        $.post(url, param, function (response) {
                            //Quando você encontrar a resposta o retorno do post ele executa a linha dentro do If
                            if (response) {
                                tr.remove();
                            }
                        });
                    }
                    else {
                        bootbox.alert("Exclusão cancelada!");
                    }
                    /* result is a boolean; true = OK, false = Cancel*/
                }
            })
        })
        //Este evento de botão é de dentro do modal, quando o usuário clicar no botão confirmar
        .on('click', '#btn_confirmar', function () {
                
            //Nesta requisição é passado a Url do controller requisitado utilizando razor
            //Seu tipo é definido com Post para enviar dos dados e retorno das informações
            //

            $.ajax({
                url: '@Url.Action("SalvarGrupoProduto", "Cadastro")',
                type: 'POST',
                data: {
                    Id: $('#id_cadastro').val(),
                    Nome: $('#txt_nome').val(),
                    Ativo: $('#cbx_ativo').prop('checked')
                },
                success: function (data) {
                    //var response = $.parseJSON(data);
             
                    var table = $('#grid_cadastro').find('tbody');
                    var linha = criar_linha_grid(data);
                    table.append(linha);
                   
                }
                
            });
          

             @*var btn = $(this),
                url = '@Url.Action("SalvarGrupoProduto","Cadastro")',
                //param se tranforma em um objeto que será passado como parametro na requisição de post
                //Dentro da construção de objetos estão:
                //Id: que é preenchido com os dados do list assim que o modal é chamado, porém, seu valor é resgatado com
                //como é visto abaixo para que seja usado de parametro quando for enviado a requisição post
                //Nome: parametro nome é prenchido com chamado do modal e tem seu valor resgatado para usado como
                //parametro para requisição post
                //Ativo: assim como os parametro anteriores seu valor é trazido do list em tela, e preenchido na
                //chamada do modal e quando é clicado no botão confirmar é enviado requisão psoto junto com outros valores
                 param = {
                     Id: $('#id_cadastro').val(),
                     Nome: $('#txt_nome').val(),
                     Ativo: $('#cbx_ativo').prop('checked')
                };
            //Neste metodo post é preenchido como parametro a url de requisição contendo
            //Controller e a action a ser usada, e também o objeto parametro
            //Caso haja sucesso
            $.post(url, param, function (response) {
                if (response) {
                    if (param.id == 0) {
                        ////Aqui você pega todo conteudo da tabela
                        var table = $('#grid_cadastro').find('tbody');

                        //esse metodo retornar a estrutura uma linha para ser adicionada com
                        //base no response

                        var linha = criar_linha_grid(response);
                        //Aqui é adicionado o a linha dentro da tabela
                        table.append(linha);
                    }
                }
            });*@

            $('#modal_cadastro').parents('bootbox').modal('hide');
        });
</script>

}